{"version":3,"sources":["components/Header.js","constants/index.js","components/NewCityForm.js","components/NewCityModal.js","components/ConfirmRemovalModal.js","components/CityList.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","API_URL","NewCityForm","state","pk","name","onChange","e","setState","target","value","createCity","preventDefault","options","method","headers","body","JSON","stringify","fetch","then","props","resetState","toggle","editCity","defaultIfEmpty","this","city","Form","onSubmit","FormGroup","Label","for","Input","type","React","NewCityModal","modal","previous","create","title","button","Button","onClick","color","style","minWidth","variant","Modal","isOpen","ModalHeader","ModalBody","ConfirmRemovalModal","deleteCity","ModalFooter","CityList","citys","Table","dark","length","colSpan","align","map","key","Home","getCitys","res","json","Container","marginTop","Row","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd3b321b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"text-center\">\r\n        <h1>Transfergoods-Citys</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","export const API_URL = \"http://52.62.138.189:8000/api/citys/\";","import React from \"react\";\r\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nimport { API_URL } from \"../constants\";\r\n\r\nclass NewCityForm extends React.Component {\r\n  state = {\r\n    pk: 0,\r\n    name: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.city) {\r\n      const { pk, name } = this.props.city;\r\n      this.setState({ pk, name });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  createCity = e => {\r\n    e.preventDefault();\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    fetch(API_URL, options).then(() => {\r\n      this.props.resetState();\r\n      this.props.toggle();\r\n    });\r\n  };\r\n\r\n  editCity = e => {\r\n    e.preventDefault();\r\n    const options = {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    fetch(API_URL + this.state.pk, options).then(() => {\r\n      this.props.resetState();\r\n      this.props.toggle();\r\n    });\r\n  };\r\n\r\n  defaultIfEmpty = value => {\r\n    return value === \"\" ? \"\" : value;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.props.city ? this.editCity : this.createCity}>\r\n        <FormGroup>\r\n          <Label for=\"name\">Name:</Label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={this.onChange}\r\n            value={this.defaultIfEmpty(this.state.name)}\r\n          />\r\n        </FormGroup>\r\n        <Button>Save</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewCityForm;","import React, { Component, Fragment } from \"react\";\r\nimport { Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport Button from '@material-ui/core/Button';\r\nimport NewCityForm from \"./NewCityForm\";\r\n\r\nclass NewCityModal extends Component {\r\n  state = {\r\n    modal: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(previous => ({\r\n      modal: !previous.modal\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const create = this.props.create;\r\n\r\n    var title = \"Edit City\";\r\n    var button = <Button onClick={this.toggle}>Edit</Button>;\r\n    if (create) {\r\n      title = \"Create New City\";\r\n\r\n      button = (\r\n        <Button\r\n          color=\"primary\"\r\n          className=\"float-right\"\r\n          onClick={this.toggle}\r\n          style={{ minWidth: \"100px\" }}\r\n          variant=\"contained\"\r\n        >\r\n          Create New\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {button}\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>{title}</ModalHeader>\r\n\r\n          <ModalBody>\r\n            <NewCityForm\r\n              resetState={this.props.resetState}\r\n              toggle={this.toggle}\r\n              city={this.props.city}\r\n            />\r\n          </ModalBody>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewCityModal;","import React, { Component, Fragment } from \"react\";\r\nimport { Modal, ModalHeader, ModalFooter } from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { API_URL } from \"../constants\";\r\n\r\nclass ConfirmRemovalModal extends Component {\r\n  state = {\r\n    modal: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(previous => ({\r\n      modal: !previous.modal\r\n    }));\r\n  };\r\n\r\n  deleteCity = pk => {\r\n    const options = {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      }\r\n    };\r\n    fetch(API_URL + pk, options).then(() => {\r\n      this.props.resetState();\r\n      this.toggle();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Button color=\"danger\" onClick={() => this.toggle()}>\r\n          Delete\r\n        </Button>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>\r\n            Confirm delete?\r\n          </ModalHeader>\r\n\r\n          <ModalFooter>\r\n            <Button type=\"button\" onClick={() => this.toggle()}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              color=\"primary\"\r\n              onClick={() => this.deleteCity(this.props.pk)}\r\n            >\r\n              Yes\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfirmRemovalModal;","import React, { Component } from \"react\";\r\nimport { Table } from \"reactstrap\";\r\nimport NewCityModal from \"./NewCityModal\";\r\n\r\nimport ConfirmRemovalModal from \"./ConfirmRemovalModal\";\r\n\r\nclass CityList extends Component {\r\n  render() {\r\n    const citys = this.props.citys;\r\n    return (\r\n      <Table dark>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {!citys || citys.length <= 0 ? (\r\n            <tr>\r\n              <td colSpan=\"6\" align=\"center\">\r\n                <b>Let's add some citys</b>\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            citys.map(city => (\r\n              <tr key={city.pk}>\r\n                <td>{city.name}</td>\r\n                <td align=\"center\">\r\n                  <NewCityModal\r\n                    create={false}\r\n                    city={city}\r\n                    resetState={this.props.resetState}\r\n                  />\r\n                  &nbsp;&nbsp;\r\n                  <ConfirmRemovalModal\r\n                    pk={city.pk}\r\n                    resetState={this.props.resetState}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityList;","import React, { Component } from \"react\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport CityList from \"./CityList\";\r\nimport NewCityModal from \"./NewCityModal\";\r\n\r\nimport { API_URL } from \"../constants\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    citys: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resetState();\r\n  }\r\n\r\n  getCitys = () => {\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      }\r\n    };\r\n    fetch(API_URL, options).then(res => res.json()).then(res => this.setState({ citys: res }));\r\n  };\r\n\r\n  resetState = () => {\r\n    this.getCitys();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container style={{ marginTop: \"20px\" }}>\r\n        <Row>\r\n          <Col>\r\n            <CityList\r\n              citys={this.state.citys}\r\n              resetState={this.resetState}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <NewCityModal create={true} resetState={this.resetState} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component, Fragment } from \"react\";\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <Home />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}